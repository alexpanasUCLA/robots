{"version":3,"sources":["components/Card/CardComponent.js","components/Cardlist/Cardlist.js","App.js","serviceWorker.js","index.js"],"names":["CardComponent","_ref","monster","react_default","a","createElement","framer_motion_es","div","whileHover","scale","rotate","className","alt","src","concat","id","name","Cardlist","monsters","map","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","monsterNames","searchValue","fetch","json","data","setState","_this2","_this$state","filteredMonsters","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAIe,SAASA,EAATC,GAAkC,IAAVC,EAAUD,EAAVC,QACnC,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAOC,IAAR,CAAYC,WAAc,CACNC,MAAO,CAAC,EAAG,KAAK,GAChBC,OAAQ,CAAC,EAAG,GAAG,IAE/BC,UAAU,kBACVR,EAAAC,EAAAC,cAAA,OAAKO,IAAI,MAAMC,IAAG,wBAAAC,OAA0BZ,EAAQa,GAAlC,4BACjBb,EAAQc,MCRN,SAASC,EAAThB,GAA8B,IAAXiB,EAAWjB,EAAXiB,SAC9B,OACIf,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aAEdO,EAASC,IAAI,SAACjB,GAAD,OACZC,EAAAC,EAAAC,cAACL,EAAD,CAAeoB,IAAKlB,EAAQa,GAAIb,QAASA,WCkCpCmB,cArCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAO,CACVC,aAAa,GACbC,YAAY,IAJHT,mNAWgBU,MAAM,4DAA3BF,kBACaA,EAAaG,cAA1BC,SACNT,KAAKU,SAAS,CAACL,aAAaI,uIAIrB,IAAAE,EAAAX,KAAAY,EAE4BZ,KAAKI,MAAjCC,EAFAO,EAEAP,aAAaC,EAFbM,EAEaN,YACdO,EAAmBR,EAAaS,OAAO,SAAArC,GAAO,OACjDA,EAAQc,KAAKwB,cAAcC,SAASV,EAAYS,iBAErD,OACErC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,YAAd,gBACAR,EAAAC,EAAAC,cAAA,SAAOM,UAAU,aAAa+B,KAAK,SAASC,YAAY,eACxDC,SAAU,SAAAC,GAAC,OAAET,EAAKD,SAAS,CAACJ,YAAYc,EAAEC,OAAOC,WAEjD5C,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAChBR,EAAAC,EAAAC,cAACY,EAAD,CAAUC,SAAUoB,aA/BVU,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f5ae3570.chunk.js","sourcesContent":["import React from 'react';\nimport { motion } from \"framer-motion\";\nimport './card.style.css'\n\nexport default function CardComponent({monster}) {\n    return (\n        <motion.div whileHover = {{\n                            scale: [1, 1.05,1],\n                            rotate: [0, 10,0],\n                         }}\n            className=\"card-container\">\n            <img alt='cat' src={`https://robohash.org/${monster.id}?set=set3&size=180x180`}/>\n            {monster.name}\n        </motion.div>\n    )\n}\n","import React from 'react';\nimport './cardlist.css'\nimport CardComponent from '../Card/CardComponent';\n\nexport default function Cardlist({monsters}) {\n    return (\n        <div className=\"card-list\">\n  \n        {monsters.map((monster)=>(\n          <CardComponent key={monster.id} monster={monster}/>)\n          )}      \n        </div>\n    )\n}\n","import React,{Component} from 'react';\n\nimport './App.css';\nimport Cardlist from './components/Cardlist/Cardlist';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state ={\n      monsterNames:[],\n      searchValue:\"\",\n    }\n  }\n\n \n\n  async componentDidMount(){\n    const monsterNames = await fetch('https://jsonplaceholder.typicode.com/users');\n    const data = await monsterNames.json();\n    this.setState({monsterNames:data})\n    \n  }\n\n  render() {\n\n    const {monsterNames,searchValue} = this.state; \n    const filteredMonsters = monsterNames.filter(monster=>\n       monster.name.toLowerCase().includes(searchValue.toLowerCase()))\n    \n  return (\n    <div className=\"App\">\n      <h3 className=\"AppTitle\">Robot Family</h3>\n      <input className=\"InputStyle\" type=\"search\" placeholder=\"robot search\"\n      onChange={e=>this.setState({searchValue:e.target.value})}/>\n    \n      <header className=\"App-header\">\n        <Cardlist monsters={filteredMonsters}/>\n      </header>\n    \n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}